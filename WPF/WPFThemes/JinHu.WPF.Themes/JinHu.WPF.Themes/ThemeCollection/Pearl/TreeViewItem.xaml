<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:local="clr-namespace:JinHu.WPF.Themes"
                    mc:Ignorable="d">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="Shared.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <ControlTemplate x:Key="ToggleButtonInsideTemplate" TargetType="ToggleButton">
    <ControlTemplate.Resources>
      <Storyboard x:Key="HoverOnToggleButton">
        <ColorAnimation Storyboard.TargetName="OuterStroke"
                        Storyboard.TargetProperty="Color"
                        To="{StaticResource Color_Border_MouseOver}"
                        Duration="0">
        </ColorAnimation>
      </Storyboard>

      <Storyboard x:Key="CheckAnimation">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.1"
                                       Storyboard.TargetName="IsExpandedPath"
                                       Storyboard.TargetProperty="Visibility">
          <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.1"
                                       Storyboard.TargetName="ExpandPath"
                                       Storyboard.TargetProperty="Visibility">
          <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>

    <Grid Width="15" Height="15" x:Name="grid"
          Background="{TemplateBinding Background}">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal"/>
          <VisualState x:Name="MouseOver" Storyboard="{StaticResource HoverOnToggleButton}"/>
          <VisualState x:Name="Pressed"/>
          <VisualState x:Name="Disabled"/>
        </VisualStateGroup>
        <VisualStateGroup x:Name="CheckStates">
          <VisualState x:Name="Checked" Storyboard="{StaticResource CheckAnimation}"/>
          <VisualState x:Name="Unchecked"/>
          <VisualState x:Name="Indeterminate"/>
        </VisualStateGroup>

        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused"/>
          <VisualState x:Name="Unfocused"/>
        </VisualStateGroup>

        <VisualStateGroup x:Name="ValidationStates">
          <VisualState x:Name="Valid"/>
          <VisualState x:Name="InvalidFocused"/>
          <VisualState x:Name="InvalidUnfocused"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>

      <Path x:Name="NormalOuter" StrokeThickness="0.6">
        <Path.Data>
          <RectangleGeometry Rect="2 2 11 11"/>
        </Path.Data>
        <Path.Stroke>
          <SolidColorBrush x:Name="OuterStroke" Color="{StaticResource Color_Border_Normal}"/>
        </Path.Stroke>
        <Path.Fill>
          <SolidColorBrush x:Name="OuterFill" Color="{StaticResource Color_Background_Normal}"/>
        </Path.Fill>
      </Path>

      <Path x:Name="IsExpandedPath" 
            Visibility="Collapsed"
            Stroke="{StaticResource Brush_Border_Normal}" 
            StrokeThickness="0.6" 
            Data="M0.5,0.5 L8.5,0.5" Margin="3,7,-3,-7"/>

      <Path x:Name="ExpandPath" 
            StrokeThickness="0.6" 
            Stroke="{StaticResource Brush_Border_Normal}" 
            Margin="3,2.7,3,2.831"
            Data="M0.5,4.78125 L8.5,4.78125 M4.5416667,8.96875 L4.5416667,0.5"/>
    </Grid>

    <ControlTemplate.Triggers>
      <!--<Trigger Property="IsMouseOver" Value="True" SourceName="grid">
        <Setter TargetName="NormalOuter" Property="Opacity" Value="0"/>
      </Trigger>-->
      <!--<Trigger Property="IsChecked" Value="True">
        <Setter Property="Visibility" Value="Visible" TargetName="IsExpandedPath"/>
        <Setter Property="Visibility" Value="Collapsed" TargetName="ExpandPath"/>
      </Trigger>-->

      <!--<Trigger Property="IsPressed" Value="True">
        <Setter Property="Fill" Value="{StaticResource SelectedBackgroundBrush}" TargetName="NormalOuter"/>
      </Trigger>-->
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
    <!--<Setter Property="Focusable" Value="False"/>-->
    <Setter Property="Background" Value="{StaticResource Brush_Background_Normal}"/>
    <Setter Property="Template" Value="{StaticResource ToggleButtonInsideTemplate}"/>
  </Style>

  <ControlTemplate x:Key="TreeViewItemTemplate" TargetType="TreeViewItem">
    <ControlTemplate.Resources>
      <local:LeftMarginMultiplierConverter x:Key="lengthConverter"/>
      <local:TreeViewLineConverter x:Key="LineConverter"/>
      <Storyboard x:Key="Hovering">
        <DoubleAnimation Storyboard.TargetName="selectedBorder" 
                         Storyboard.TargetProperty="Opacity"
                         To="0.6" Duration="0"/>
        <!--<ColorAnimation Storyboard.TargetName="toggleButtonExpanderBackgroundColor"
                        Storyboard.TargetProperty="Color"
                        To="Red" Duration="0"/>-->
        <!--<DoubleAnimation Storyboard.TargetName="ToggleButtonExpander"
                        Storyboard.TargetProperty="Opacity"
                        To="0" Duration="0"/>-->
      </Storyboard>
      <Storyboard x:Key="Selecting">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" 
                                       Storyboard.TargetName="selectedBorder" 
                                       Storyboard.TargetProperty="Opacity">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="Expanding">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="0"
                                       Storyboard.TargetName="ItemsHost"
                                       Storyboard.TargetProperty="Visibility">
          <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="NoItemsAnimation">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="0"
                                       Storyboard.TargetName="ToggleButtonExpander"
                                       Storyboard.TargetProperty="Visibility">
          <DiscreteObjectKeyFrame Value="{x:Static Visibility.Hidden}"/>
        </ObjectAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="Disabling">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" 
                                       Storyboard.TargetName="MainBorder" 
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>

    <Grid x:Name="grid">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal"/>
          <VisualState x:Name="MouseOver" Storyboard="{StaticResource Hovering}"/>
          <VisualState x:Name="Disabled"/>
        </VisualStateGroup>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused"/>
          <VisualState x:Name="Unfocused"/>
        </VisualStateGroup>
        <VisualStateGroup x:Name="ExpansionStates">
          <VisualState x:Name="Expanded"/>
          <VisualState x:Name="Collapsed" Storyboard="{StaticResource Expanding}"/>
        </VisualStateGroup>
        <VisualStateGroup x:Name="HasItemsStates">
          <VisualState x:Name="HasItems"/>
          <VisualState x:Name="NoItems" Storyboard="{StaticResource NoItemsAnimation}"/>
        </VisualStateGroup>
        <VisualStateGroup x:Name="SelectionStates">
          <VisualState x:Name="Selected"/>
          <VisualState x:Name="SelectedInactive"/>
          <VisualState x:Name="Unselected" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ValidationStates">
          <VisualState x:Name="Valid"/>
          <VisualState x:Name="InvalidFocused"/>
          <VisualState x:Name="InvalidUnfocused"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>

      <Grid.ColumnDefinitions >
        <ColumnDefinition MinWidth="19" Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>

      <Border x:Name="selectedBorder" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0"
              Background="Transparent"
              Margin="{Binding Converter={StaticResource lengthConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>

      <!-- Connecting Lines -->
      <Rectangle x:Name="HorLn" Height="1" 
                 Stroke="{StaticResource Brush_Border_Normal}" 
                 Margin="9,0,0,0" 
                 SnapsToDevicePixels="False" 
                 StrokeDashArray="1,2" StrokeThickness="1"/>
      <Rectangle x:Name="VerLn" Width="1" 
                 Stroke="{StaticResource Brush_Border_Normal}" 
                 Grid.RowSpan="2" 
                 SnapsToDevicePixels="False" 
                 StrokeDashArray="1,2" StrokeThickness="1"/>
      <ToggleButton x:Name="ToggleButtonExpander"
                    Grid.Column="0" Grid.Row="0"
                    Style="{DynamicResource ResourceKey=ToggleButtonStyle}"
                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                    ClickMode="Press">
        <ToggleButton.BorderBrush>
          <SolidColorBrush x:Name="toggleButtonExpanderBorderBrush" Color="{StaticResource Color_Border_Normal}"/>
        </ToggleButton.BorderBrush>
        <ToggleButton.Background>
          <SolidColorBrush x:Name="toggleButtonExpanderBackgroundColor" Color="{StaticResource Color_Background_Normal}"/>
        </ToggleButton.Background>
      </ToggleButton>
      <Border x:Name="Bd" Grid.Column="1" 
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">
        <ContentPresenter x:Name="PART_Header" 
                          ContentSource="Header"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
      </Border>

      <Border x:Name="hoverBorder"
              Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0"
              Background="{StaticResource Brush_Background_MouseOver}" Opacity="0"
              Margin="{Binding Converter={StaticResource lengthConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>

      <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1"/>
    </Grid>

    <ControlTemplate.Triggers>

      <!-- This trigger changes the connecting lines if the item is the last in the list -->
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}" Value="true">
        <Setter TargetName="VerLn" Property="Height" Value="8"/>
        <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top"/>
      </DataTrigger>

      <Trigger Property="IsExpanded" Value="false">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>

      <Trigger Property="HasItems" Value="false">
        <Setter TargetName="ToggleButtonExpander" Property="Visibility" Value="Hidden"/>
      </Trigger>

      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="HasHeader" Value="false"/>
          <Condition Property="Width" Value="Auto"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
      </MultiTrigger>

      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="HasHeader" Value="false"/>
          <Condition Property="Height" Value="Auto"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
      </MultiTrigger>

      <Trigger Property="IsSelected" Value="true">
        <Setter TargetName="selectedBorder" Property="Background" Value="{StaticResource Brush_Background_Selected}"/>
        <Setter TargetName="selectedBorder" Property="Opacity" Value="0.6"/>
        <Setter TargetName="HorLn" Property="Opacity" Value="1"/>
        <Setter TargetName="VerLn" Property="Opacity" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource Brush_Foreground_Checked}"/>
      </Trigger>

      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="true"/>
          <Condition Property="IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="selectedBorder" Property="Background" Value="{StaticResource Brush_Background_Selected}"/>
        <Setter TargetName="selectedBorder" Property="Opacity" Value="0.3"/>
        <Setter Property="Foreground" Value="{StaticResource Brush_Foreground_MouseOver}"/>
      </MultiTrigger>

      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="selectedBorder" Property="Background" Value="{StaticResource Brush_Background_Selected}"/>
        <Setter TargetName="selectedBorder" Property="Opacity" Value="0.6"/>
        <Setter TargetName="HorLn" Property="Opacity" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource Brush_Foreground_Checked}"/>
      </MultiTrigger>

      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{StaticResource Brush_Foreground_Disable}"/>
      </Trigger>

      <!--<MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="selectedBorder" Property="Background" Value="{StaticResource Brush_Background_Selected}"/>
        <Setter TargetName="selectedBorder" Property="Opacity" Value="0.6"/>
        <Setter TargetName="HorLn" Property="Opacity" Value="1"/>
        <Setter TargetName="VerLn" Property="Opacity" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource Brush_Foreground_Checked}"/>
      </MultiTrigger>-->

      <Trigger SourceName="hoverBorder" Property="IsMouseOver" Value="True">
        <Setter TargetName="selectedBorder" Property="Opacity" Value="0.3"/>
        <Setter TargetName="selectedBorder" Property="Background" Value="{StaticResource Brush_Background_MouseOver}"/>
        <Setter Property="Foreground" Value="{StaticResource Brush_Foreground_MouseOver}"/>
      </Trigger>

    </ControlTemplate.Triggers>

  </ControlTemplate>

  <Style TargetType="TreeViewItem">
    <Setter Property="Foreground" Value="{StaticResource Brush_Foreground_Normal}"/>
    <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
    <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
    <Setter Property="Template" Value="{StaticResource TreeViewItemTemplate}"/>
  </Style>

  <Style TargetType="TreeViewItem" x:Key="AttachedBehavior_TreeViewItemStyle">
    <Setter Property="Foreground" Value="{StaticResource Brush_Foreground_Normal}"/>
    <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
    <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
    <Setter Property="Template" Value="{StaticResource TreeViewItemTemplate}"/>
  </Style>
</ResourceDictionary>